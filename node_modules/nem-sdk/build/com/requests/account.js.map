{"version":3,"sources":["../../../src/com/requests/account.js"],"names":["data","endpoint","address","options","url","formatEndpoint","method","headers","urlEncoded","qs","dataFromPublicKey","publicKey","harvestedBlocks","incomingTransactions","txHash","txId","params","outgoingTransactions","unconfirmedTransactions","unlockInfo","startHarvesting","privateKey","json","body","stopHarvesting","forwarded","namespacesOwned","parent","mosaicDefinitionsCreated","mosaicDefinitions","mosaicsOwned","allTransactions","module","exports","mosaics","owned","definitions","allDefinitions","namespaces","harvesting","blocks","start","stop","transactions","incoming","outgoing","unconfirmed","all"],"mappings":"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","file":"account.js","sourcesContent":["import Helpers from '../../utils/helpers';\nimport Headers from './headers';\nimport Send from './send';\n\n/**\n * Gets the AccountMetaDataPair of an account.\n *\n * @param {object} endpoint - An NIS endpoint object\n * @param {string} address - An account address\n *\n * @return {object} - An [AccountMetaDataPair]{@link http://bob.nem.ninja/docs/#accountMetaDataPair} object\n */\nlet data = function(endpoint, address) {\n\t// Configure the request\n\tvar options = {\n\t    url: Helpers.formatEndpoint(endpoint) + '/account/get',\n\t    method: 'GET',\n\t    headers: Headers.urlEncoded,\n\t    qs: {'address': address}\n\t}\n\t// Send the request\n\treturn Send(options);\n}\n\n/**\n * Gets the AccountMetaDataPair of an account with a public Key.\n *\n * @param {object} endpoint - An NIS endpoint object\n * @param {string} publicKey - An account public key\n *\n * @return {object} - An [AccountMetaDataPair]{@link http://bob.nem.ninja/docs/#accountMetaDataPair} object\n */\nlet dataFromPublicKey = function(endpoint, publicKey) {\n\t// Configure the public key request\n\tconst options = {\n\t    url: Helpers.formatEndpoint(endpoint) + '/account/get/from-public-key',\n\t    method: 'GET',\n\t    headers: Headers.urlEncoded,\n\t    qs: {'publicKey': publicKey}\n\t}\n\t// Send the request\n\treturn Send(options);\n}\n\n/**\n * Gets an array of harvest info objects for an account.\n *\n * @param {object} endpoint - An NIS endpoint object\n * @param {string} address - An account address\n *\n * @return {array} - An array of [HarvestInfo]{@link http://bob.nem.ninja/docs/#harvestInfo} objects\n */\nlet harvestedBlocks = function(endpoint, address){\n\t// Configure the request\n\tvar options = {\n\t    url: Helpers.formatEndpoint(endpoint) + '/account/harvests',\n\t    method: 'GET',\n\t    headers: Headers.urlEncoded,\n\t    qs: {'address': address}\n\t}\n\t// Send the request\n\treturn Send(options);\n}\n\n/**\n * Gets an array of TransactionMetaDataPair objects where the recipient has the address given as parameter to the request.\n *\n * @param {object} endpoint - An NIS endpoint object\n * @param {string} address - An account address\n * @param {string} txHash - The 256 bit sha3 hash of the transaction up to which transactions are returned. (optional)\n * @param {string} txId - The transaction id up to which transactions are returned. (optional)\n *\n * @return {array} - An array of [TransactionMetaDataPair]{@link http://bob.nem.ninja/docs/#transactionMetaDataPair} objects\n */\nlet incomingTransactions = function(endpoint, address, txHash, txId){\n\t// Arrange\n\tlet params = {'address': address};\n\tif (txHash) params['hash'] = txHash;\n\tif (txId) params['id'] = txId;\n\n\t// Configure the request\n\tvar options = {\n\t    url: Helpers.formatEndpoint(endpoint) + '/account/transfers/incoming',\n\t    method: 'GET',\n\t    headers: Headers.urlEncoded,\n\t    qs: params\n\t}\n\t// Send the request\n\treturn Send(options);\n}\n\n/**\n * Gets an array of TransactionMetaDataPair objects where the sender has the address given as parameter to the request.\n *\n * @param {object} endpoint - An NIS endpoint object\n * @param {string} address - An account address\n * @param {string} txHash - The 256 bit sha3 hash of the transaction up to which transactions are returned. (optional)\n * @param {string} txId - The transaction id up to which transactions are returned. (optional)\n *\n * @return {array} - An array of [TransactionMetaDataPair]{@link http://bob.nem.ninja/docs/#transactionMetaDataPair} objects\n */\nlet outgoingTransactions = function(endpoint, address, txHash, txId){\n\t// Arrange\n\tlet params = {'address': address};\n\tif (txHash) params['hash'] = txHash;\n\tif (txId) params['id'] = txId;\n\n\t// Configure the request\n\tvar options = {\n\t    url: Helpers.formatEndpoint(endpoint) + '/account/transfers/outgoing',\n\t    method: 'GET',\n\t    headers: Headers.urlEncoded,\n\t    qs: params\n\t}\n\t// Send the request\n\treturn Send(options);\n}\n\n/**\n * Gets the array of transactions for which an account is the sender or receiver and which have not yet been included in a block.\n *\n * @param {object} endpoint - An NIS endpoint object\n * @param {string} address - An account address\n *\n * @return {array} - An array of [UnconfirmedTransactionMetaDataPair]{@link http://bob.nem.ninja/docs/#unconfirmedTransactionMetaDataPair} objects\n */\nlet unconfirmedTransactions = function(endpoint, address){\n\t// Configure the request\n\tvar options = {\n\t    url: Helpers.formatEndpoint(endpoint) + '/account/unconfirmedTransactions',\n\t    method: 'GET',\n\t    headers: Headers.urlEncoded,\n\t    qs: {'address': address}\n\t}\n\t// Send the request\n\treturn Send(options);\n}\n\n/**\n * Gets information about the maximum number of allowed harvesters and how many harvesters are already using the node\n *\n * @param {object} endpoint - An NIS endpoint object\n *\n * @return {object} - An [UnlockInfo]{@link http://bob.nem.ninja/docs/#retrieving-the-unlock-info} object\n */\nlet unlockInfo = function(endpoint) {\n\t// Configure the request\n\tvar options = {\n\t    url: Helpers.formatEndpoint(endpoint) + '/account/unlocked/info',\n\t    method: 'POST',\n\t    headers: Headers.urlEncoded\n\t}\n\t// Send the request\n\treturn Send(options);\n};\n\n/**\n * Unlocks an account (starts harvesting).\n *\n * @param {object} endpoint - An NIS endpoint object\n * @param {string} privateKey - A delegated account private key\n *\n * @return - Nothing\n */\nlet startHarvesting = function(endpoint, privateKey){\n\t// Configure the request\n\tvar options = {\n\t    url: Helpers.formatEndpoint(endpoint) + '/account/unlock',\n\t    method: 'POST',\n\t    json: true,\n\t\tbody: {'value': privateKey}\n\t}\n\t// Send the request\n\treturn Send(options);\n};\n\n /**\n * Locks an account (stops harvesting).\n *\n * @param {object} endpoint - An NIS endpoint object\n * @param {string} privateKey - A delegated account private key\n *\n * @return - Nothing\n */\nlet stopHarvesting = function(endpoint, privateKey){\n\t// Configure the request\n\tvar options = {\n\t    url: Helpers.formatEndpoint(endpoint) + '/account/lock',\n\t    method: 'POST',\n\t    json: true,\n\t\tbody: {'value': privateKey}\n\t}\n\t// Send the request\n\treturn Send(options);\n};\n\n/**\n * Gets the AccountMetaDataPair of the account for which the given account is the delegate account\n *\n * @param {object} endpoint - An NIS endpoint object\n * @param {string} address - An account address\n *\n * @return {object} - An [AccountMetaDataPair]{@link http://bob.nem.ninja/docs/#accountMetaDataPair} object\n */\nlet forwarded = function(endpoint, address) {\n\t// Configure the request\n\tvar options = {\n\t    url: Helpers.formatEndpoint(endpoint) + '/account/get/forwarded',\n\t    method: 'GET',\n\t    headers: Headers.urlEncoded,\n\t    qs: {'address': address}\n\t}\n\t// Send the request\n\treturn Send(options);\n}\n\n/**\n * Gets namespaces that an account owns\n *\n * @param {object} endpoint - An NIS endpoint object\n * @param {string} address - An account address\n * @param {string} parent - The namespace parent (optional)\n *\n * @return {object} - An array of [NamespaceMetaDataPair]{@link http://bob.nem.ninja/docs/#namespaceMetaDataPair} objects\n */\nlet namespacesOwned = function(endpoint, address, parent){\n\t// Configure the request\n\tvar options = {\n\t    url: Helpers.formatEndpoint(endpoint) + '/account/namespace/page',\n\t    method: 'GET',\n\t    headers: Headers.urlEncoded,\n\t    qs: { 'address': address, 'parent': parent || \"\"}\n\t}\n\t// Send the request\n\treturn Send(options);\n}\n\n/**\n * Gets mosaic definitions that an account has created\n *\n * @param {object} endpoint - An NIS endpoint object\n * @param {string} address - An account address\n * @param {string} parent - The namespace parent (optional)\n *\n * @return {object} - An array of [MosaicDefinition]{@link http://bob.nem.ninja/docs/#mosaicDefinition} objects\n */\nlet mosaicDefinitionsCreated = function(endpoint, address, parent){\n\t// Configure the request\n\tvar options = {\n\t    url: Helpers.formatEndpoint(endpoint) + '/account/mosaic/definition/page',\n\t    method: 'GET',\n\t    headers: Headers.urlEncoded,\n\t    qs: { 'address': address, 'parent': parent || \"\"}\n\t}\n\t// Send the request\n\treturn Send(options);\n}\n\n/**\n * Gets mosaic definitions that an account owns\n *\n * @param {object} endpoint - An NIS endpoint object\n * @param {string} address - An account address\n *\n * @return {array} - An array of [MosaicDefinition]{@link http://bob.nem.ninja/docs/#mosaicDefinition} objects\n */\nlet mosaicDefinitions = function(endpoint, address){\n\t// Configure the request\n\tvar options = {\n\t    url: Helpers.formatEndpoint(endpoint) + '/account/mosaic/owned/definition',\n\t    method: 'GET',\n\t    headers: Headers.urlEncoded,\n\t    qs: { 'address': address }\n\t}\n\t// Send the request\n\treturn Send(options);\n}\n\n/**\n * Gets mosaics that an account owns\n *\n * @param {object} endpoint - An NIS endpoint object\n * @param {string} address - An account address\n *\n * @return {array} - An array of [Mosaic]{@link http://bob.nem.ninja/docs/#mosaic} objects\n */\nlet mosaicsOwned = function(endpoint, address){\n\t// Configure the request\n\tvar options = {\n\t    url: Helpers.formatEndpoint(endpoint) + '/account/mosaic/owned',\n\t    method: 'GET',\n\t    headers: Headers.urlEncoded,\n\t    qs: { 'address': address }\n\t}\n\t// Send the request\n\treturn Send(options);\n}\n\n/**\n * Gets all transactions of an account\n *\n * @param {object} endpoint - An NIS endpoint object\n * @param {string} address - An account address\n * @param {string} txHash - The 256 bit sha3 hash of the transaction up to which transactions are returned. (optional)\n * @param {string} txId - The transaction id up to which transactions are returned. (optional)\n *\n * @return {array} - An array of [TransactionMetaDataPair]{@link http://bob.nem.ninja/docs/#transactionMetaDataPair} objects\n */\nlet allTransactions = function(endpoint, address, txHash, txId){\n\t// Arrange\n\tlet params = {'address': address};\n\tif (txHash) params['hash'] = txHash;\n\tif (txId) params['id'] = txId;\n\n\t// Configure the request\n\tvar options = {\n\t    url: Helpers.formatEndpoint(endpoint) + '/account/transfers/all',\n\t    method: 'GET',\n\t    headers: Headers.urlEncoded,\n\t    qs: params\n\t}\n\t// Send the request\n\treturn Send(options);\n}\n\nmodule.exports = {\n\tdata,\n\tdataFromPublicKey,\n\tunlockInfo,\n\tforwarded,\n\tmosaics: {\n\t\towned: mosaicsOwned,\n\t\tdefinitions: mosaicDefinitionsCreated,\n\t\tallDefinitions: mosaicDefinitions\n\t},\n\tnamespaces: {\n\t\towned: namespacesOwned\n\t},\n\tharvesting: {\n\t\tblocks: harvestedBlocks,\n\t\tstart: startHarvesting,\n\t\tstop: stopHarvesting\n\t},\n\ttransactions: {\n\t\tincoming: incomingTransactions,\n\t\toutgoing: outgoingTransactions,\n\t\tunconfirmed: unconfirmedTransactions,\n\t\tall: allTransactions\n\t}\n}"]}