{"version":3,"sources":["../../src/crypto/cryptoHelpers.js"],"names":["toMobileKey","password","privateKey","Error","isPrivateKeyValid","salt","lib","WordArray","random","key","PBKDF2","keySize","iterations","iv","randomBytes","encIv","ua2words","encrypted","AES","encrypt","enc","Hex","parse","ua2hex","ciphertext","toString","derivePassSha","count","data","console","time","i","SHA3","outputLength","timeEnd","stringify","passwordToPrivatekey","common","walletAccount","algo","r","undefined","isHW","pass","obj","hex2ua","priv","d","decrypt","checkAddress","network","_expectedAddress","expectedAddress","toUpperCase","replace","kp","create","address","toAddress","publicKey","hashfunc","dest","dataLength","convertedData","hash","words2ua","key_derive","shared","sk","pk","lowlevel","crypto_shared_key_hash","length","randomKey","rkey","encKey","encodePrivKey","_encode","senderPriv","recipientPub","msg","isPublicKeyValid","hex2ua_reversed","Uint8Array","utf8ToHex","result","encode","encoded","decode","recipientPrivate","senderPublic","_payload","binPayload","buffer","payload","plain","hexplain","module","exports"],"mappings":"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","file":"cryptoHelpers.js","sourcesContent":["import KeyPair from './keyPair';\nimport convert from '../utils/convert';\nimport Address from '../model/address';\nimport nacl from '../external/nacl-fast';\nimport Network from '../model/network';\nimport CryptoJS from 'crypto-js';\nimport Helpers from '../utils/helpers';\n\n/**\n * Encrypt a private key for mobile apps (AES_PBKF2)\n *\n * @param {string} password - A wallet password\n * @param {string} privateKey - An account private key\n *\n * @return {object} - The encrypted data\n */\nlet toMobileKey = function(password, privateKey) {\n    // Errors\n    if (!password || !privateKey) throw new Error('Missing argument !');\n    if (!Helpers.isPrivateKeyValid(privateKey)) throw new Error('Private key is not valid !');\n    // Processing\n    let salt = CryptoJS.lib.WordArray.random(256 / 8);\n    let key = CryptoJS.PBKDF2(password, salt, {\n        keySize: 256 / 32,\n        iterations: 2000\n    });\n    let iv = nacl.randomBytes(16)\n    let encIv = {\n        iv: convert.ua2words(iv, 16)\n    };\n    let encrypted = CryptoJS.AES.encrypt(CryptoJS.enc.Hex.parse(privateKey), key, encIv);\n    // Result\n    return {\n        encrypted: convert.ua2hex(iv) + encrypted.ciphertext,\n        salt:  salt.toString()\n    }\n};\n\n/**\n * Derive a private key from a password using count iterations of SHA3-256\n *\n * @param {string} password - A wallet password\n * @param {number} count - A number of iterations above 0\n *\n * @return {object} - The derived private key\n */\nlet derivePassSha = function(password, count) {\n    // Errors\n    if(!password) throw new Error('Missing argument !');\n    if(!count || count <= 0) throw new Error('Please provide a count number above 0');\n    // Processing\n    let data = password;\n    console.time('sha3^n generation time');\n    for (let i = 0; i < count; ++i) {\n        data = CryptoJS.SHA3(data, {\n            outputLength: 256\n        });\n    }\n    console.timeEnd('sha3^n generation time');\n    // Result\n    return {\n        'priv': CryptoJS.enc.Hex.stringify(data)\n    };\n};\n\n/**\n * Reveal the private key of an account or derive it from the wallet password\n *\n * @param {object} common- An object containing password and privateKey field\n * @param {object} walletAccount - A wallet account object\n * @param {string} algo - A wallet algorithm\n *\n * @return {object|boolean} - The account private key in and object or false\n */\nlet passwordToPrivatekey = function(common, walletAccount, algo) {\n    // Errors\n    if(!common || !walletAccount || !algo) throw new Error('Missing argument !');\n\n    let r = undefined;\n\n    if (algo === \"trezor\") { // HW wallet\n        r = { 'priv': '' };\n        common.isHW = true;\n    } else if (!common.password) {\n        throw new Error('Missing argument !');\n    }\n\n    // Processing\n    if (algo === \"pass:6k\") { // Brain wallets\n        if (!walletAccount.encrypted && !walletAccount.iv) {\n            // Account private key is generated simply using a passphrase so it has no encrypted and iv\n            r = derivePassSha(common.password, 6000);\n        } else if (!walletAccount.encrypted || !walletAccount.iv) {\n            // Else if one is missing there is a problem\n            //console.log(\"Account might be compromised, missing encrypted or iv\");\n            return false;\n        } else {\n            // Else child accounts have encrypted and iv so we decrypt\n            let pass = derivePassSha(common.password, 20);\n            let obj = {\n                ciphertext: CryptoJS.enc.Hex.parse(walletAccount.encrypted),\n                iv: convert.hex2ua(walletAccount.iv),\n                key: convert.hex2ua(pass.priv)\n            };\n            let d = decrypt(obj);\n            r = { 'priv': d };\n        }\n    } else if (algo === \"pass:bip32\") { // Wallets from PRNG\n        let pass = derivePassSha(common.password, 20);\n        let obj = {\n            ciphertext: CryptoJS.enc.Hex.parse(walletAccount.encrypted),\n            iv: convert.hex2ua(walletAccount.iv),\n            key: convert.hex2ua(pass.priv)\n        };\n        let d = decrypt(obj);\n        r = { 'priv': d };\n    } else if (algo === \"pass:enc\") { // Private Key wallets\n        let pass = derivePassSha(common.password, 20);\n        let obj = {\n            ciphertext: CryptoJS.enc.Hex.parse(walletAccount.encrypted),\n            iv: convert.hex2ua(walletAccount.iv),\n            key: convert.hex2ua(pass.priv)\n        };\n        let d = decrypt(obj);\n        r = { 'priv': d };\n    } else if (!r) {\n        //console.log(\"Unknown wallet encryption method\");\n        return false;\n    }\n    // Result\n    common.privateKey = r.priv;\n    return true;\n}\n\n/**\n * Check if a private key correspond to an account address\n *\n * @param {string} priv - An account private key\n * @param {number} network - A network id\n * @param {string} _expectedAddress - The expected NEM address\n *\n * @return {boolean} - True if valid, false otherwise\n */\nlet checkAddress = function(priv, network, _expectedAddress) {\n    // Errors\n    if (!priv || !network || !_expectedAddress) throw new Error('Missing argument !');\n    if (!Helpers.isPrivateKeyValid(priv)) throw new Error('Private key is not valid !');\n    //Processing\n    let expectedAddress = _expectedAddress.toUpperCase().replace(/-/g, '');\n    let kp = KeyPair.create(priv);\n    let address = Address.toAddress(kp.publicKey.toString(), network);\n    // Result\n    return address === expectedAddress;\n};\n\nfunction hashfunc(dest, data, dataLength) {\n    let convertedData = convert.ua2words(data, dataLength);\n    let hash = CryptoJS.SHA3(convertedData, {\n        outputLength: 512\n    });\n    convert.words2ua(dest, hash);\n}\n\nfunction key_derive(shared, salt, sk, pk) {\n    nacl.lowlevel.crypto_shared_key_hash(shared, pk, sk, hashfunc);\n    for (let i = 0; i < salt.length; i++) {\n        shared[i] ^= salt[i];\n    }\n    let hash = CryptoJS.SHA3(convert.ua2words(shared, 32), {\n        outputLength: 256\n    });\n    return hash;\n}\n\n/**\n * Generate a random key\n *\n * @return {Uint8Array} - A random key\n */\nlet randomKey = function() {\n    let rkey = nacl.randomBytes(32)\n    return rkey;\n};\n\n/**\n * Encrypt hex data using a key\n *\n * @param {string} data - An hex string\n * @param {Uint8Array} key - An Uint8Array key\n *\n * @return {object} - The encrypted data\n */\nlet encrypt = function(data, key) {\n    // Errors\n    if (!data || !key) throw new Error('Missing argument !');\n    // Processing\n    let iv = nacl.randomBytes(16)\n    let encKey = convert.ua2words(key, 32);\n    let encIv = {\n        iv: convert.ua2words(iv, 16)\n    };\n    let encrypted = CryptoJS.AES.encrypt(CryptoJS.enc.Hex.parse(data), encKey, encIv);\n    // Result\n    return {\n        ciphertext: encrypted.ciphertext,\n        iv: iv,\n        key: key\n    };\n};\n\n/**\n * Decrypt data\n *\n * @param {object} data - An encrypted data object\n *\n * @return {string} - The decrypted hex string\n */\nlet decrypt = function(data) {\n    // Errors\n    if (!data) throw new Error('Missing argument !');\n    // Processing\n    let encKey = convert.ua2words(data.key, 32);\n    let encIv = {\n        iv: convert.ua2words(data.iv, 16)\n    };\n    // Result\n    return CryptoJS.enc.Hex.stringify(CryptoJS.AES.decrypt(data, encKey, encIv));\n};\n\n/**\n * Encode a private key using a password\n *\n * @param {string} privateKey - An hex private key\n * @param {string} password - A password\n *\n * @return {object} - The encoded data\n */\nlet encodePrivKey = function(privateKey, password) {\n    // Errors\n    if (!privateKey || !password) throw new Error('Missing argument !');\n    if (!Helpers.isPrivateKeyValid(privateKey)) throw new Error('Private key is not valid !');\n    // Processing\n    let pass = derivePassSha(password, 20);\n    let r = encrypt(privateKey, convert.hex2ua(pass.priv));\n    // Result\n    return {\n        ciphertext: CryptoJS.enc.Hex.stringify(r.ciphertext),\n        iv: convert.ua2hex(r.iv)\n    };\n};\n\n/***\n * Encode a message, separated from encode() to help testing\n *\n * @param {string} senderPriv - A sender private key\n * @param {string} recipientPub - A recipient public key\n * @param {string} msg - A text message\n * @param {Uint8Array} iv - An initialization vector\n * @param {Uint8Array} salt - A salt\n *\n * @return {string} - The encoded message\n */\nlet _encode = function(senderPriv, recipientPub, msg, iv, salt) {\n    // Errors\n    if (!senderPriv || !recipientPub || !msg || !iv || !salt) throw new Error('Missing argument !');\n    if (!Helpers.isPrivateKeyValid(senderPriv)) throw new Error('Private key is not valid !');\n    if (!Helpers.isPublicKeyValid(recipientPub)) throw new Error('Public key is not valid !');\n    // Processing\n    let sk = convert.hex2ua_reversed(senderPriv);\n    let pk = convert.hex2ua(recipientPub);\n    let shared = new Uint8Array(32);\n    let r = key_derive(shared, salt, sk, pk);\n    let encKey = r;\n    let encIv = {\n        iv: convert.ua2words(iv, 16)\n    };\n    let encrypted = CryptoJS.AES.encrypt(CryptoJS.enc.Hex.parse(convert.utf8ToHex(msg)), encKey, encIv);\n    // Result\n    let result = convert.ua2hex(salt) + convert.ua2hex(iv) + CryptoJS.enc.Hex.stringify(encrypted.ciphertext);\n    return result;\n};\n\n/**\n * Encode a message\n *\n * @param {string} senderPriv - A sender private key\n * @param {string} recipientPub - A recipient public key\n * @param {string} msg - A text message\n *\n * @return {string} - The encoded message\n */\nlet encode = function(senderPriv, recipientPub, msg) {\n    // Errors\n    if (!senderPriv || !recipientPub || !msg) throw new Error('Missing argument !');\n    if (!Helpers.isPrivateKeyValid(senderPriv)) throw new Error('Private key is not valid !');\n    if (!Helpers.isPublicKeyValid(recipientPub)) throw new Error('Public key is not valid !');\n    // Processing\n    let iv = nacl.randomBytes(16)\n    //console.log(\"IV:\", convert.ua2hex(iv));\n    let salt = nacl.randomBytes(32)\n    let encoded = _encode(senderPriv, recipientPub, msg, iv, salt);\n    // Result\n    return encoded;\n};\n\n/**\n * Decode an encrypted message payload\n *\n * @param {string} recipientPrivate - A recipient private key\n * @param {string} senderPublic - A sender public key\n * @param {string} _payload - An encrypted message payload\n *\n * @return {string} - The decoded payload as hex\n */\nlet decode = function(recipientPrivate, senderPublic, _payload) {\n    // Errors\n    if(!recipientPrivate || !senderPublic || !_payload) throw new Error('Missing argument !');\n    if (!Helpers.isPrivateKeyValid(recipientPrivate)) throw new Error('Private key is not valid !');\n    if (!Helpers.isPublicKeyValid(senderPublic)) throw new Error('Public key is not valid !');\n    // Processing\n    let binPayload = convert.hex2ua(_payload);\n    let salt = new Uint8Array(binPayload.buffer, 0, 32);\n    let iv = new Uint8Array(binPayload.buffer, 32, 16);\n    let payload = new Uint8Array(binPayload.buffer, 48);\n    let sk = convert.hex2ua_reversed(recipientPrivate);\n    let pk = convert.hex2ua(senderPublic);\n    let shared = new Uint8Array(32);\n    let r = key_derive(shared, salt, sk, pk);\n    let encKey = r;\n    let encIv = {\n        iv: convert.ua2words(iv, 16)\n    };\n    let encrypted = {\n        'ciphertext': convert.ua2words(payload, payload.length)\n    };\n    let plain = CryptoJS.AES.decrypt(encrypted, encKey, encIv);\n    // Result\n    let hexplain = CryptoJS.enc.Hex.stringify(plain);\n    return hexplain;\n};\n\nmodule.exports = {\n    toMobileKey,\n    derivePassSha,\n    passwordToPrivatekey,\n    checkAddress,\n    randomKey,\n    decrypt,\n    encrypt,\n    encodePrivKey,\n    _encode,\n    encode,\n    decode\n}\n"]}