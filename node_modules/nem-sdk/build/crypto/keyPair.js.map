{"version":3,"sources":["../../src/crypto/keyPair.js"],"names":["BinaryKey","keyData","data","toString","ua2hex","hashfunc","dest","dataLength","convertedData","ua2words","hash","SHA3","outputLength","words2ua","hashobj","sha3","algo","create","reset","update","converted","length","result","enc","Hex","stringify","Uint8Array","parse","Error","finalize","KeyPair","privkey","publicKey","lowlevel","crypto_sign_PUBLICKEYBYTES","secretKey","hex2ua_reversed","crypto_sign_keypair_hash","sign","sig","hasher","r","crypto_sign_hash","alert","hexdata","isPrivateKeyValid","verifySignature","signature","isPublicKeyValid","isHexadecimal","_pk","hex2ua","_signature","c","p","gf","q","unpackneg","h","subarray","reduce","scalarmult","t","scalarbase","add","pack","crypto_verify_32","module","exports"],"mappings":"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","file":"keyPair.js","sourcesContent":["import nacl from '../external/nacl-fast';\nimport convert from '../utils/convert';\nimport Helpers from '../utils/helpers';\nimport CryptoJS from 'crypto-js';\n\n/***\n* Create a BinaryKey object\n*\n* @param {Uint8Array} keyData - A key data\n*/\nlet BinaryKey = function(keyData) {\n    this.data = keyData;\n    this.toString = function() {\n        return convert.ua2hex(this.data);\n    }\n}\n\nlet hashfunc = function(dest, data, dataLength) {\n    let convertedData = convert.ua2words(data, dataLength);\n    let hash = CryptoJS.SHA3(convertedData, {\n        outputLength: 512\n    });\n    convert.words2ua(dest, hash);\n}\n\n/***\n* Create an hasher object\n*/\nlet hashobj = function() {\n    this.sha3 = CryptoJS.algo.SHA3.create({\n        outputLength: 512\n    });\n    this.reset = function() {\n        this.sha3 = CryptoJS.algo.SHA3.create({\n            outputLength: 512\n        });\n    }\n\n    this.update = function(data) {\n        if (data instanceof BinaryKey) {\n            let converted = convert.ua2words(data.data, data.data.length);\n            let result = CryptoJS.enc.Hex.stringify(converted);\n            this.sha3.update(converted);\n\n        } else if (data instanceof Uint8Array) {\n            let converted = convert.ua2words(data, data.length);\n            this.sha3.update(converted);\n\n        } else if (typeof data === \"string\") {\n            let converted = CryptoJS.enc.Hex.parse(data);\n            this.sha3.update(converted);\n\n        } else {\n            throw new Error(\"unhandled argument\");\n        }\n    }\n\n    this.finalize = function(result) {\n        let hash = this.sha3.finalize();\n        convert.words2ua(result, hash);\n    };\n}\n\n/***\n* Create a KeyPair Object \n*\n* @param {string} privkey - An hex private key\n*/\nlet KeyPair = function(privkey) {\n    this.publicKey = new BinaryKey(new Uint8Array(nacl.lowlevel.crypto_sign_PUBLICKEYBYTES));\n    this.secretKey = convert.hex2ua_reversed(privkey);\n    nacl.lowlevel.crypto_sign_keypair_hash(this.publicKey.data, this.secretKey, hashfunc);\n\n    // Signature\n    this.sign = (data) => {\n        let sig = new Uint8Array(64);\n        let hasher = new hashobj();\n        let r = nacl.lowlevel.crypto_sign_hash(sig, this, data, hasher);\n        if (!r) {\n            alert(\"Couldn't sign the tx, generated invalid signature\");\n            throw new Error(\"Couldn't sign the tx, generated invalid signature\");\n        }\n        return new BinaryKey(sig);\n    }\n}\n\n/**\n* Create a NEM KeyPair\n*\n* @param {string} hexdata - An hex private key\n*\n* @return {object} - The NEM KeyPair object\n*/\nlet create = function(hexdata) {\n    // Errors\n    if(!hexdata) throw new Error('Missing argument !');\n    if (!Helpers.isPrivateKeyValid(hexdata)) throw new Error('Private key is not valid !');\n    // Processing\n    let r = new KeyPair(hexdata);\n    // Result\n    return r;\n}\n\n/**\n * Verify a signature.\n *\n * @param {string} publicKey - The public key to use for verification.\n * @param {string} data - The data to verify.\n * @param {string} signature - The signature to verify.\n *\n * @return {boolean}  - True if the signature is valid, false otherwise.\n */\nlet verifySignature = function(publicKey, data, signature) {\n    // Errors\n    if(!publicKey || !data || !signature) throw new Error('Missing argument !');\n    if (!Helpers.isPublicKeyValid(publicKey)) throw new Error('Public key is not valid !');\n    \n    if (!Helpers.isHexadecimal(signature)) {\n        //console.error('Signature must be hexadecimal only !');\n        return false;\n    }\n    if (signature.length !== 128) {\n        //console.error('Signature length is incorrect !') \n        return false;\n    }\n\n    // Create an hasher object\n    let hasher = new hashobj();\n    // Convert public key to Uint8Array\n    let _pk = convert.hex2ua(publicKey);\n    // Convert signature to Uint8Array\n    let _signature = convert.hex2ua(signature);\n\n    const c = nacl;\n    const p = [c.gf(), c.gf(), c.gf(), c.gf()];\n    const q = [c.gf(), c.gf(), c.gf(), c.gf()];\n\n    if (c.unpackneg(q, _pk)) return false;\n\n    const h = new Uint8Array(64);\n    hasher.reset();\n    hasher.update(_signature.subarray(0, 64/2));\n    hasher.update(_pk);\n    hasher.update(data);\n    hasher.finalize(h);\n\n    c.reduce(h);\n    c.scalarmult(p, q, h);\n\n    const t = new Uint8Array(64);\n    c.scalarbase(q, _signature.subarray(64/2));\n    c.add(p, q);\n    c.pack(t, p);\n\n    return 0 === nacl.lowlevel.crypto_verify_32(_signature, 0, t, 0);\n}\n\nmodule.exports = {\n    create,\n    verifySignature\n}\n"]}