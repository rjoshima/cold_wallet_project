{"version":3,"sources":["../../../src/model/transactions/multisigAggregateModificationTransaction.js"],"names":["prepare","common","tx","network","Error","kp","create","fixPrivateKey","privateKey","actualSender","isMultisig","multisigAccount","publicKey","toString","due","data","testnet","id","entity","_construct","modifications","relativeChange","senderPublicKey","timeStamp","createNEMTimeStamp","hasNoRelativeChange","version","getVersion","multisigModification","totalFee","multisigAggregateModificationTransaction","custom","minCosignatories","length","sort","a","b","modificationType","toAddress","cosignatoryAccount","localeCompare","extendObj","module","exports"],"mappings":"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","file":"multisigAggregateModificationTransaction.js","sourcesContent":["import Network from '../network';\nimport Helpers from '../../utils/helpers';\nimport TransactionTypes from '../transactionTypes';\nimport KeyPair from '../../crypto/keyPair';\nimport Fees from '../fees';\nimport Objects from '../objects';\nimport Address from '../address';\nimport MultisigWrapper from './multisigWrapper';\n\n/**\n * Prepare a multisig aggregate modification transaction object\n *\n * @param {object} common - A common object\n * @param {object} tx - An un-prepared multisigAggregateModificationTransaction object\n * @param {number} network - A network id\n *\n * @return {object} - A [MultisigAggregateModificationTransaction]{@link http://bob.nem.ninja/docs/#multisigAggregateModificationTransaction} object ready for serialization\n */\nlet prepare = function(common, tx, network) {\n    if (!common || !tx || !network) throw new Error('Missing parameter !');\n    let kp = KeyPair.create(Helpers.fixPrivateKey(common.privateKey));\n    let actualSender = tx.isMultisig ? tx.multisigAccount.publicKey : kp.publicKey.toString();\n    let due = network === Network.data.testnet.id ? 60 : 24 * 60;\n    let entity = _construct(actualSender, tx.modifications, tx.relativeChange, tx.isMultisig, due, network);\n    if (tx.isMultisig) {\n        entity = MultisigWrapper(kp.publicKey.toString(), entity, due, network);\n    }\n    return entity;\n}\n\n/**\n * Create a multisignature aggregate modification transaction object\n *\n * @param {string} senderPublicKey - The sender account public key\n * @param {array} modifications - An array of [MultisigCosignatoryModification]{@link http://bob.nem.ninja/docs/#multisigCosignatoryModification} objects  \n * @param {number} relativeChange - The number of signature to add or remove (ex: 1 to add +1 or -1 to remove one)\n * @param {boolean} isMultisig - True if transaction is multisig, false otherwise\n * @param {number} due - The deadline in minutes\n * @param {number} network - A network id\n *\n * @return {object} - A [MultisigAggregateModificationTransaction]{@link http://bob.nem.ninja/docs/#multisigAggregateModificationTransaction} object\n */\nlet _construct = function(senderPublicKey, modifications, relativeChange, isMultisig, due, network) {\n    let timeStamp = Helpers.createNEMTimeStamp();\n    let hasNoRelativeChange = relativeChange === null || relativeChange === 0;\n    let version = hasNoRelativeChange ? Network.getVersion(1, network) : Network.getVersion(2, network);\n    let data = Objects.create(\"commonTransactionPart\")(TransactionTypes.multisigModification, senderPublicKey, timeStamp, due, version);\n    let totalFee = Fees.multisigAggregateModificationTransaction;\n    let custom = {\n        'fee': totalFee,\n        'modifications': modifications,\n        'minCosignatories': {\n            'relativeChange': 0\n        }\n    }\n    // If multisig, it is a modification of an existing contract, otherwise it is a creation\n    if(isMultisig) {\n        // If no relative change, no minCosignatories property\n        if (hasNoRelativeChange) delete custom.minCosignatories;\n        else custom.minCosignatories.relativeChange = relativeChange;\n\n        // Sort modification array\n        if (custom.modifications.length > 1) {\n            custom.modifications.sort((a, b) => {\n                return a.modificationType - b.modificationType || Address.toAddress(a.cosignatoryAccount, network).localeCompare(Address.toAddress(b.cosignatoryAccount, network));\n            });\n        }\n    } else {\n        custom.minCosignatories.relativeChange = relativeChange;\n\n        // Sort modification array by addresses\n        if (custom.modifications.length > 1) {\n            custom.modifications.sort((a, b) => {\n                if (Address.toAddress(a.cosignatoryAccount, network) < Address.toAddress(b.cosignatoryAccount, network)) return -1;\n                if (Address.toAddress(a.cosignatoryAccount, network) > Address.toAddress(b.cosignatoryAccount, network)) return 1;\n                return 0;\n            });\n        }\n    }\n\n    let entity = Helpers.extendObj(data, custom);\n    return entity;\n}\n\nmodule.exports = {\n    prepare\n}"]}