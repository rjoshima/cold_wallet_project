{"version":3,"sources":["../../../src/model/transactions/importanceTransferTransaction.js"],"names":["prepare","common","tx","network","Error","kp","create","fixPrivateKey","privateKey","actualSender","isMultisig","multisigAccount","publicKey","toString","due","data","testnet","id","entity","_construct","remoteAccount","mode","senderPublicKey","remotePublicKey","timeStamp","createNEMTimeStamp","version","getVersion","importanceTransfer","fee","importanceTransferTransaction","custom","extendObj","module","exports"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;;;;;;;;;AASA,IAAIA,UAAU,SAAVA,OAAU,CAAUC,MAAV,EAAkBC,EAAlB,EAAsBC,OAAtB,EAA+B;AACzC,QAAI,CAACF,MAAD,IAAW,CAACC,EAAZ,IAAkB,CAACC,OAAvB,EAAgC,MAAM,IAAIC,KAAJ,CAAU,qBAAV,CAAN;AAChC,QAAIC,KAAK,kBAAQC,MAAR,CAAe,kBAAQC,aAAR,CAAsBN,OAAOO,UAA7B,CAAf,CAAT;AACA,QAAIC,eAAeP,GAAGQ,UAAH,GAAgBR,GAAGS,eAAH,CAAmBC,SAAnC,GAA+CP,GAAGO,SAAH,CAAaC,QAAb,EAAlE;AACA,QAAIC,MAAMX,YAAY,kBAAQY,IAAR,CAAaC,OAAb,CAAqBC,EAAjC,GAAsC,EAAtC,GAA2C,KAAK,EAA1D;AACA,QAAIC,SAASC,WAAWV,YAAX,EAAyBP,GAAGkB,aAA5B,EAA2ClB,GAAGmB,IAA9C,EAAoDP,GAApD,EAAyDX,OAAzD,CAAb;AACA,QAAID,GAAGQ,UAAP,EAAmB;AACfQ,iBAAS,+BAAgBb,GAAGO,SAAH,CAAaC,QAAb,EAAhB,EAAyCK,MAAzC,EAAiDJ,GAAjD,EAAsDX,OAAtD,CAAT;AACH;AACD,WAAOe,MAAP;AACH,CAVD;;AAYA;;;;;;;;;;;AAWA,IAAIC,aAAa,SAAbA,UAAa,CAASG,eAAT,EAA0BC,eAA1B,EAA2CF,IAA3C,EAAiDP,GAAjD,EAAsDX,OAAtD,EAA+D;AAC5E,QAAIqB,YAAY,kBAAQC,kBAAR,EAAhB;AACA,QAAIC,UAAU,kBAAQC,UAAR,CAAmB,CAAnB,EAAsBxB,OAAtB,CAAd;AACA,QAAIY,OAAO,kBAAQT,MAAR,CAAe,uBAAf,EAAwC,2BAAiBsB,kBAAzD,EAA6EN,eAA7E,EAA8FE,SAA9F,EAAyGV,GAAzG,EAA8GY,OAA9G,CAAX;AACA,QAAIG,MAAM,eAAKC,6BAAf;AACA,QAAIC,SAAS;AACT,yBAAiBR,eADR;AAET,gBAAQF,IAFC;AAGT,eAAOQ;AAHE,KAAb;AAKA,QAAIX,SAAS,kBAAQc,SAAR,CAAkBjB,IAAlB,EAAwBgB,MAAxB,CAAb;AACA,WAAOb,MAAP;AACH,CAZD;;AAcAe,OAAOC,OAAP,GAAiB;AACblC;AADa,CAAjB","file":"importanceTransferTransaction.js","sourcesContent":["import Network from '../network';\nimport Helpers from '../../utils/helpers';\nimport TransactionTypes from '../transactionTypes';\nimport Fees from '../fees';\nimport KeyPair from '../../crypto/keyPair';\nimport Objects from '../objects';\nimport MultisigWrapper from './multisigWrapper';\n\n/**\n * Prepare an importance transfer transaction object\n *\n * @param {object} common - A common object\n * @param {object} tx - An un-prepared importanceTransferTransaction object\n * @param {number} network - A network id\n *\n * @return {object} - An [ImportanceTransferTransaction]{@link https://bob.nem.ninja/docs/#importanceTransferTransaction} object ready for serialization\n */\nlet prepare = function (common, tx, network) {\n    if (!common || !tx || !network) throw new Error('Missing parameter !');\n    let kp = KeyPair.create(Helpers.fixPrivateKey(common.privateKey));\n    let actualSender = tx.isMultisig ? tx.multisigAccount.publicKey : kp.publicKey.toString();\n    let due = network === Network.data.testnet.id ? 60 : 24 * 60;\n    let entity = _construct(actualSender, tx.remoteAccount, tx.mode, due, network);\n    if (tx.isMultisig) {\n        entity = MultisigWrapper(kp.publicKey.toString(), entity, due, network);\n    }\n    return entity;\n}\n\n/***\n * Create an importance transfer transaction object\n *\n * @param {string} senderPublicKey - The sender account public key\n * @param {string} remotePublicKey - The remote account public key\n * @param {number} mode - 1 for activating, 2 for deactivating\n * @param {number} due - The deadline in minutes\n * @param {number} network - A network id\n *\n * @return {object} - An [ImportanceTransferTransaction]{@link https://bob.nem.ninja/docs/#importanceTransferTransaction} object\n */\nlet _construct = function(senderPublicKey, remotePublicKey, mode, due, network) {\n    let timeStamp = Helpers.createNEMTimeStamp();\n    let version = Network.getVersion(1, network);\n    let data = Objects.create(\"commonTransactionPart\")(TransactionTypes.importanceTransfer, senderPublicKey, timeStamp, due, version);\n    let fee = Fees.importanceTransferTransaction;\n    let custom = {\n        'remoteAccount': remotePublicKey,\n        'mode': mode,\n        'fee': fee\n    };\n    let entity = Helpers.extendObj(data, custom);\n    return entity;\n}\n\nmodule.exports = {\n    prepare\n}"]}