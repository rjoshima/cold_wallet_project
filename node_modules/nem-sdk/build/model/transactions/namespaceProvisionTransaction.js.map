{"version":3,"sources":["../../../src/model/transactions/namespaceProvisionTransaction.js"],"names":["prepare","common","tx","network","Error","kp","create","fixPrivateKey","privateKey","actualSender","isMultisig","multisigAccount","publicKey","toString","rentalFeeSink","namespace","toUpperCase","replace","rentalFee","namespaceParent","subProvisionNamespaceTransaction","rootProvisionNamespaceTransaction","fqn","namespaceName","due","data","testnet","id","entity","_construct","senderPublicKey","timeStamp","createNEMTimeStamp","version","getVersion","provisionNamespace","fee","namespaceAndMosaicCommon","custom","extendObj","module","exports"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;;;;;;;;;AASA,IAAIA,UAAU,SAAVA,OAAU,CAAUC,MAAV,EAAkBC,EAAlB,EAAsBC,OAAtB,EAA+B;AACzC,QAAI,CAACF,MAAD,IAAW,CAACC,EAAZ,IAAkB,CAACC,OAAvB,EAAgC,MAAM,IAAIC,KAAJ,CAAU,qBAAV,CAAN;AAChC,QAAIC,KAAK,kBAAQC,MAAR,CAAe,kBAAQC,aAAR,CAAsBN,OAAOO,UAA7B,CAAf,CAAT;AACA,QAAIC,eAAeP,GAAGQ,UAAH,GAAgBR,GAAGS,eAAH,CAAmBC,SAAnC,GAA+CP,GAAGO,SAAH,CAAaC,QAAb,EAAlE;AACA,QAAIC,gBAAgB,gBAAMC,SAAN,CAAgBZ,OAAhB,EAAyBa,WAAzB,GAAuCC,OAAvC,CAA+C,IAA/C,EAAqD,EAArD,CAApB;AACA,QAAIC,kBAAJ;AACA;AACA,QAAIhB,GAAGiB,eAAP,EAAwB;AACpBD,oBAAY,eAAKE,gCAAjB;AACH,KAFD,MAEO;AACHF,oBAAY,eAAKG,iCAAjB;AACH;AACD,QAAIF,kBAAkBjB,GAAGiB,eAAH,GAAqBjB,GAAGiB,eAAH,CAAmBG,GAAxC,GAA8C,IAApE;AACA,QAAIC,gBAAgBrB,GAAGqB,aAAH,CAAiBV,QAAjB,EAApB;AACA,QAAIW,MAAMrB,YAAY,kBAAQsB,IAAR,CAAaC,OAAb,CAAqBC,EAAjC,GAAsC,EAAtC,GAA2C,KAAK,EAA1D;AACA,QAAIC,SAASC,WAAWpB,YAAX,EAAyBK,aAAzB,EAAwCI,SAAxC,EAAmDC,eAAnD,EAAoEI,aAApE,EAAmFC,GAAnF,EAAwFrB,OAAxF,CAAb;AACA,QAAID,GAAGQ,UAAP,EAAmB;AACfkB,iBAAS,+BAAgBvB,GAAGO,SAAH,CAAaC,QAAb,EAAhB,EAAyCe,MAAzC,EAAiDJ,GAAjD,EAAsDrB,OAAtD,CAAT;AACH;AACD,WAAOyB,MAAP;AACH,CApBD;;AAsBA;;;;;;;;;;;;;AAaA,IAAIC,aAAa,SAAbA,UAAa,CAASC,eAAT,EAA0BhB,aAA1B,EAAyCI,SAAzC,EAAoDC,eAApD,EAAqEI,aAArE,EAAoFC,GAApF,EAAyFrB,OAAzF,EAAkG;AAC/G,QAAI4B,YAAY,kBAAQC,kBAAR,EAAhB;AACA,QAAIC,UAAU,kBAAQC,UAAR,CAAmB,CAAnB,EAAsB/B,OAAtB,CAAd;AACA,QAAIsB,OAAO,kBAAQnB,MAAR,CAAe,uBAAf,EAAwC,2BAAiB6B,kBAAzD,EAA6EL,eAA7E,EAA8FC,SAA9F,EAAyGP,GAAzG,EAA8GS,OAA9G,CAAX;AACA,QAAIG,MAAM,eAAKC,wBAAf;AACA,QAAIC,SAAS;AACT,yBAAiBxB,cAAcE,WAAd,GAA4BC,OAA5B,CAAoC,IAApC,EAA0C,EAA1C,CADR;AAET,qBAAaC,SAFJ;AAGT,kBAAUC,eAHD;AAIT,mBAAWI,aAJF;AAKT,eAAOa;AALE,KAAb;AAOA,QAAIR,SAAS,kBAAQW,SAAR,CAAkBd,IAAlB,EAAwBa,MAAxB,CAAb;AACA,WAAOV,MAAP;AACH,CAdD;;AAgBAY,OAAOC,OAAP,GAAiB;AACbzC;AADa,CAAjB","file":"namespaceProvisionTransaction.js","sourcesContent":["import Network from '../network';\nimport Helpers from '../../utils/helpers';\nimport TransactionTypes from '../transactionTypes';\nimport Fees from '../fees';\nimport KeyPair from '../../crypto/keyPair';\nimport Objects from '../objects';\nimport Sinks from '../sinks';\nimport MultisigWrapper from './multisigWrapper';\n\n/**\n * Prepare a namespace provision transaction object\n *\n * @param {object} common - A common object\n * @param {object} tx - An un-prepared namespaceProvisionTransaction object\n * @param {number} network - A network id\n *\n * @return {object} - A [ProvisionNamespaceTransaction]{@link http://bob.nem.ninja/docs/#provisionNamespaceTransaction} object ready for serialization\n */\nlet prepare = function (common, tx, network) {\n    if (!common || !tx || !network) throw new Error('Missing parameter !');\n    let kp = KeyPair.create(Helpers.fixPrivateKey(common.privateKey));\n    let actualSender = tx.isMultisig ? tx.multisigAccount.publicKey : kp.publicKey.toString();\n    let rentalFeeSink = Sinks.namespace[network].toUpperCase().replace(/-/g, '');\n    let rentalFee;\n    // Set fee depending if namespace or sub\n    if (tx.namespaceParent) {\n        rentalFee = Fees.subProvisionNamespaceTransaction;\n    } else {\n        rentalFee = Fees.rootProvisionNamespaceTransaction;\n    }\n    let namespaceParent = tx.namespaceParent ? tx.namespaceParent.fqn : null;\n    let namespaceName = tx.namespaceName.toString();\n    let due = network === Network.data.testnet.id ? 60 : 24 * 60;\n    let entity = _construct(actualSender, rentalFeeSink, rentalFee, namespaceParent, namespaceName, due, network);\n    if (tx.isMultisig) {\n        entity = MultisigWrapper(kp.publicKey.toString(), entity, due, network);\n    }\n    return entity;\n}\n\n/***\n * Create a namespace provision transaction object\n *\n * @param {string} senderPublicKey - The sender account public key\n * @param {string} rentalFeeSink - The rental sink account\n * @param {number} rentalFee - The rental fee\n * @param {string} namespaceParent - The parent namespace\n * @param {string} namespaceName  - The namespace name\n * @param {number} due - The deadline in minutes\n * @param {number} network - A network id\n *\n * @return {object} - A [ProvisionNamespaceTransaction]{@link http://bob.nem.ninja/docs/#provisionNamespaceTransaction} object\n */\nlet _construct = function(senderPublicKey, rentalFeeSink, rentalFee, namespaceParent, namespaceName, due, network) {\n    let timeStamp = Helpers.createNEMTimeStamp();\n    let version = Network.getVersion(1, network);\n    let data = Objects.create(\"commonTransactionPart\")(TransactionTypes.provisionNamespace, senderPublicKey, timeStamp, due, version);\n    let fee = Fees.namespaceAndMosaicCommon;\n    let custom = {\n        'rentalFeeSink': rentalFeeSink.toUpperCase().replace(/-/g, ''),\n        'rentalFee': rentalFee,\n        'parent': namespaceParent,\n        'newPart': namespaceName,\n        'fee': fee\n    };\n    let entity = Helpers.extendObj(data, custom);\n    return entity;\n}\n\nmodule.exports = {\n    prepare\n}"]}