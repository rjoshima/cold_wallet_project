{"version":3,"sources":["../../src/model/wallet.js"],"names":["createPRNG","walletName","password","network","length","Error","privateKey","ua2hex","randomBytes","kp","create","addr","toAddress","publicKey","toString","encrypted","encodePrivKey","createBrain","passphrase","derivePassSha","priv","importPrivateKey","isPrivateKeyValid","module","exports"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;;;;;;;;;AASA,IAAIA,aAAa,SAAbA,UAAa,CAAUC,UAAV,EAAsBC,QAAtB,EAAgCC,OAAhC,EAAyC;AACtD,QAAI,CAACF,WAAWG,MAAZ,IAAsB,CAACF,SAASE,MAAhC,IAA0C,CAACD,OAA/C,EAAwD,MAAM,IAAIE,KAAJ,CAAU,0BAAV,CAAN;AACxD;AACA,QAAIC,aAAa,kBAAQC,MAAR,CAAe,mBAAKC,WAAL,CAAiB,EAAjB,CAAf,CAAjB;AACA,QAAIC,KAAK,kBAAQC,MAAR,CAAeJ,UAAf,CAAT;AACA;AACA,QAAIK,OAAO,kBAAQC,SAAR,CAAkBH,GAAGI,SAAH,CAAaC,QAAb,EAAlB,EAA2CX,OAA3C,CAAX;AACA;AACA,QAAIY,YAAY,wBAAcC,aAAd,CAA4BV,UAA5B,EAAwCJ,QAAxC,CAAhB;AACA,WAAO,kBAAQQ,MAAR,CAAe,QAAf,EAAyBT,UAAzB,EAAqCU,IAArC,EAA2C,IAA3C,EAAiD,YAAjD,EAA+DI,SAA/D,EAA0EZ,OAA1E,CAAP;AACH,CAVD;;AAYA;;;;;;;;;AASA,IAAIc,cAAc,SAAdA,WAAc,CAAUhB,UAAV,EAAsBiB,UAAtB,EAAkCf,OAAlC,EAA2C;AACzD,QAAI,CAACF,WAAWG,MAAZ,IAAsB,CAACc,WAAWd,MAAlC,IAA4C,CAACD,OAAjD,EAA0D,MAAM,IAAIE,KAAJ,CAAU,0BAAV,CAAN;AAC1D,QAAIC,aAAa,wBAAca,aAAd,CAA4BD,UAA5B,EAAwC,IAAxC,EAA8CE,IAA/D;AACA,QAAIX,KAAK,kBAAQC,MAAR,CAAeJ,UAAf,CAAT;AACA;AACA,QAAIK,OAAO,kBAAQC,SAAR,CAAkBH,GAAGI,SAAH,CAAaC,QAAb,EAAlB,EAA2CX,OAA3C,CAAX;AACA,WAAO,kBAAQO,MAAR,CAAe,QAAf,EAAyBT,UAAzB,EAAqCU,IAArC,EAA2C,IAA3C,EAAiD,SAAjD,EAA4D,EAA5D,EAAgER,OAAhE,CAAP;AACH,CAPD;;AASA;;;;;;;;;;AAUA,IAAIkB,mBAAmB,SAAnBA,gBAAmB,CAAUpB,UAAV,EAAsBC,QAAtB,EAAgCI,UAAhC,EAA4CH,OAA5C,EAAqD;AACxE,QAAI,CAACF,WAAWG,MAAZ,IAAsB,CAACF,SAASE,MAAhC,IAA0C,CAACD,OAA3C,IAAsD,CAACG,UAA3D,EAAuE,MAAM,IAAID,KAAJ,CAAU,0BAAV,CAAN;AACvE,QAAI,CAAC,kBAAQiB,iBAAR,CAA0BhB,UAA1B,CAAL,EAA4C,MAAM,IAAID,KAAJ,CAAU,4BAAV,CAAN;AAC5C;AACA,QAAII,KAAK,kBAAQC,MAAR,CAAeJ,UAAf,CAAT;AACA,QAAIK,OAAO,kBAAQC,SAAR,CAAkBH,GAAGI,SAAH,CAAaC,QAAb,EAAlB,EAA2CX,OAA3C,CAAX;AACA;AACA,QAAIY,YAAY,wBAAcC,aAAd,CAA4BV,UAA5B,EAAwCJ,QAAxC,CAAhB;AACA,WAAO,kBAAQQ,MAAR,CAAe,QAAf,EAAyBT,UAAzB,EAAqCU,IAArC,EAA2C,KAA3C,EAAkD,UAAlD,EAA8DI,SAA9D,EAAyEZ,OAAzE,CAAP;AACH,CATD;;AAWAoB,OAAOC,OAAP,GAAiB;AACbxB,0BADa;AAEbiB,4BAFa;AAGbI;AAHa,CAAjB","file":"wallet.js","sourcesContent":["import nacl from '../external/nacl-fast';\nimport convert from '../utils/convert';\nimport Helpers from '../utils/helpers';\nimport KeyPair from '../crypto/keyPair';\nimport CryptoHelpers from '../crypto/cryptoHelpers';\nimport Address from '../model/address';\nimport Objects from './objects';\n\n/**\n * Create a wallet containing a private key generated using a Pseudo Random Number Generator\n *\n * @param {string} walletName - The wallet name\n * @param {string} password - The wallet password\n * @param {number} network - The network id\n *\n * @return {object} - A PRNG wallet object\n */\nlet createPRNG = function (walletName, password, network) {\n    if (!walletName.length || !password.length || !network) throw new Error('A parameter is missing !');\n    // Generate keypair from random private key\n    var privateKey = convert.ua2hex(nacl.randomBytes(32));\n    var kp = KeyPair.create(privateKey);\n    // Create address from public key\n    let addr = Address.toAddress(kp.publicKey.toString(), network);\n    // Encrypt private key using password\n    let encrypted = CryptoHelpers.encodePrivKey(privateKey, password);\n    return Objects.create(\"wallet\")(walletName, addr, true, \"pass:bip32\", encrypted, network);\n}\n\n/**\n * Create a wallet containing a private key generated using a derived passphrase\n *\n * @param {string} walletName - The wallet name\n * @param {string} passphrase - The wallet passphrase\n * @param {number} network - The network id\n *\n * @return {object} - A Brain wallet object\n */\nlet createBrain = function (walletName, passphrase, network) {\n    if (!walletName.length || !passphrase.length || !network) throw new Error('A parameter is missing !');\n    var privateKey = CryptoHelpers.derivePassSha(passphrase, 6000).priv;\n    var kp = KeyPair.create(privateKey);\n    // Create address from public key\n    let addr = Address.toAddress(kp.publicKey.toString(), network);\n    return Objects.create(\"wallet\")(walletName, addr, true, \"pass:6k\", \"\", network);\n}\n\n/**\n * Create a wallet containing any private key\n *\n * @param {string} walletName - The wallet name\n * @param {string} password - The wallet passphrase\n * @param {string} privateKey - The private key to import\n * @param {number} network - The network id\n *\n * @return {object} - A private key wallet object\n */\nlet importPrivateKey = function (walletName, password, privateKey, network) {\n    if (!walletName.length || !password.length || !network || !privateKey) throw new Error('A parameter is missing !');\n    if (!Helpers.isPrivateKeyValid(privateKey)) throw new Error('Private key is not valid !');\n    // Create address from private key\n    let kp = KeyPair.create(privateKey);\n    let addr = Address.toAddress(kp.publicKey.toString(), network);\n    // Encrypt private key using password\n    let encrypted = CryptoHelpers.encodePrivKey(privateKey, password);\n    return Objects.create(\"wallet\")(walletName, addr, false, \"pass:enc\", encrypted, network);\n}\n\nmodule.exports = {\n    createPRNG,\n    createBrain,\n    importPrivateKey\n}"]}